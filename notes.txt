--------------------------------------------------------------------------------
Integers, expressions, and variables (int_exp.rkt)  [249 lines]

Language S_0:
e ::= n | x | (+ e e) | (- e e) | (- e) | (read) | (let ([x e]) e)

  * uniquify
  * flatten to C0
    atomic   a  ::= n | x
    expr     e  ::= a | (prim op a ...)
    stmt     s  ::= (assign x e) | (return a)
    program  p  ::= (program (x ...) (s ...))
  * instruction selection to x86

--------------------------------------------------------------------------------
Parsing? Racket has "Parser Tools: lex and yacc-style Parsing"
  and there's an example of doing S_0 by Dan King
  https://gist.github.com/danking/1068185

--------------------------------------------------------------------------------
Register Allocation (register_allocator.rkt) [210 lines]

reserve rax for spill code
 -> can use same code as prior to register allocation!

perform a single-pass of register allocation

--------------------------------------------------------------------------------
Conditional control flow, Booleans, and type checking (conditionals.rkt)
  [311 lines]

S1

T ::= Integer | Boolean
e ::= ...
    | #t | #f | (if e e e) | (eq? e e) | (and e e) | (or e e) | (not e)


    Γ ⊢ e0 : T      Γ ⊢ e1 : T
    --------------------------
    Γ ⊢ (eq? e0 e1) : Bool


--------------------------------------------------------------------------------
Tuples (Racket Vectors) and heap allocation (vectors.rkt)
  [136 lines] (too easy?)

(needed to represent closures)
(do we need mutation here, or can that be delayed?)

T ::= Integer | (Vector T_1 ... T_n) | Void
e ::= ...
    | (vector e_1 ... e_n) | (vector-ref e e)
    | (vector-set! e e e)

Type System

    Γ ⊢ e0 : Integer      Γ ⊢ e1 : T
    -------------------------------------
    Γ ⊢ (vector e_1 ... e_n) : (Vector T1 ... Tn)

    Γ ⊢ e : (Vector T_1 ... T_n)
    ---------------------------
    Γ ⊢ (vector-ref e i) : T_i

    Γ ⊢ e_1 : (Vector T_1 ... T_n)   Γ ⊢ e_2 : T_i
    --------------------------------------------
    Γ ⊢ (vector-set! e_1 i e_2) : Void

--------------------------------------------------------------------------------
S3: Functions (functions.rkt) (top-level functions)

T ::= Integer | Boolean | (Vectorof T) | (T1 ... Tn -> T)
p ::= (program d ... e)
d ::= (define (f [x : T] ...) : T e)
e ::= ...
    | (e0 e1 ... en)

    Γ,x1 : T1, ..., xn : Tn ⊢ e : T
    ------------------------------------------------------------------
    Γ ⊢ (define (f [x1 : T1] ... [xn : Tn]) : T e) : (T1 ... Tn -> T)

where Γ is the top-level environment obtained by collecting
all of the types for the defines.


    Γ ⊢ e0 : (T1 ... Tn -> T)       for i ∈ 1..n, Γ ⊢ ei : Ti 
    ---------------------------------------------------------
    Γ ⊢ (e0 e1 ... en) : T


--------------------------------------------------------------------------------
Garbage Collection (Copying Collector)

idea:
  * Put pointers (GC roots) on a separate stack to differentiate from 
    non-pointers. At this stage in the compiler, the only heap-allocated 
    things are vectors. So we're putting vectors (which are pointers) onto 
    the separate stack.

  * We still need to have type information about the objects on the heap 
    to facilitate recursively exploring them during collection.
    Here's a couple options:
    1. Create a table for type information, with a unique natural number for 
       each type, assigned during compilation.
       Allocate the table during initialization of the program.
    2. Add a bitmask at the front of each vector that indicates 
       which elements are pointers to the heap and which ones are not.

--------------------------------------------------------------------------------
First-Class Functions and recursive binding (lambda.rkt)

e ::= ...
    | (lambda: ([x1 : T1] ... [xn : Tn]) : T e)
    | (e e ...)
    | (letrec ([x e] ...) e)

    Γ, x1 : T1, ..., xn : Tn ⊢ e : T
    ----------------------------------------------------------------
    Γ ⊢ (lambda: ([x1 : T1] ... [xn : Tn]) : T e) : (T1 ... Tn -> T)

--------------------------------------------------------------------------------
Type dynamic

T ::= Integer | Boolean | (Vectorof T) | (-> T T ...) | Dyn
G ::= Integer | Boolean | Vector | Function
e ::= ...
    | (inject e G) | (project e G) | (isa? G e)

--------------------------------------------------------------------------------
Dynamic typing
(side project)

e ::= n | x | (+ e e) | (- e) | (let ([x e] ...) e)
    | (vector-immutable e ...) | (vector-length e) | (vector-ref e e)
    | #t | #f | (if e e e) | (equal? e e) | (and e e) | (or e e) | (not e)
    | (lambda (x ...) e) | (e e ...)

--------------------------------------------------------------------------------
Gradual typing

T ::= Integer | Boolean | (Vectorof T) | (-> T T ...) | Dyn
e ::= n | x | (+ e e) | (- e) | (let: ([x : T e] ...) e)
    | (vector-immutable e ...) | (vector-length e) | (vector-ref e e)
    | #t | #f | (if e e e) | (equal? e e) | (and e e) | (or e e) | (not e)
    | (lambda: ([x : T] ...) e) | (e e ...)
    | (lambda (x ...) e) | (let ([x e] ...) e)
    | (ann e T) | (static e) | (dynamic e)

--------------------------------------------------------------------------------
Lists and mutation

T ::= Integer | Boolean | (Vectorof T) | (-> T T ...) | Dyn | (Listof T)
e ::= ...
    | (eq? e e)
    | null | (mcons e e) | (mcar e) | (mcdr e) | (set-mcar! e e) |
      (set-mcdr! e e)

--------------------------------------------------------------------------------
Parametric Polymorphism (strech goal)


--------------------------------------------------------------------------------
Optimization (Function inlining, constant folding, etc.)

